{"version":3,"sources":["../lib/generateAutoPhrases.js"],"names":["verbs","hex2rgbCSS","hex","red","green","blue","alpha","r","str","RegExp","or","arr","capture","noLeadingSpace","required","map","word","join","string","int","elInEl","When","clickElement","text","input","parent","randomVariableRegex","randomVariable","match","randomNumber","Math","round","random","replace","stateVariableRegex","stateVariable","STATE","type","contains","clear","screen","url","SCREENS","Error","cy","visit","direction","windowObj","window","then","win","get","body","scrollHeight","px","scrollTo","waitForResults","el1","el1Parent","el1Contains","el2","el2Parent","el2Contains","$el1","trigger","which","force","el2X","el2Y","$el","x","y","getBoundingClientRect","containerX","containerY","newPosOpts","matchImageSnapshot","threshold","Then","should","number","el","singular","shouldExist","background"],"mappings":"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","file":"generateAutoPhrases.js","sourcesContent":["import hex2rgb from 'hex-rgb';\nimport { addMatchImageSnapshotCommand } from 'cypress-image-snapshot/command';\n\nimport {\n    SCREENS,\n    STATE,\n    setState,\n} from './variables';\n\nimport {\n    clickElement,\n    shouldExist,\n    getNormalized,\n    waitForResults,\n} from './functions';\n\nexport const verbs = [\n    'a',\n    'on',\n    'on the',\n    'an a',\n    'the',\n    'into',\n    'into the',\n    'of',\n    'of the',\n    'in',\n    'in the',\n    'inside',\n    'inside of',\n    'inside the',\n    'inside of the',\n];\n\nexport const hex2rgbCSS = (hex) => {\n    const { red, green, blue, alpha } = hex2rgb(hex);\n\n    return `rgb(${red}, ${green}, ${blue}${alpha < 255 ? ` ${alpha}` : ''})`;\n}\n\n// regex builder (via string)\nexport const r = str => new RegExp(`^${str}$`, 'i');\n\nexport const or = (arr, { capture, noLeadingSpace, required } = {}) =>`(${\n    capture ? '' : '?:'}${\n    arr.map(\n        word => (\n            noLeadingSpace\n                ? ''\n                : ' '\n            ) + word\n    ).join('|')})${\n    required ? '' : '?'}`;\n\nexport const string = '\"([^\"]+)\"';\nexport const int = '(\\\\d+)';\n\nexport const elInEl = `${or(verbs)} ${string}(?:${or(verbs)} ${string})?(?: containing ${string})?`;\n\naddMatchImageSnapshotCommand();\n\nexport default () => {\n    // ex:  I click on the \"Button\"\n    //      I click \"Save\"\n    //      I click on \"Save\" inside the \"Modal\"\n    //      I click on \"Button\" inside the \"Modal\" containing \"Save\"\n    When(\n        r(`I click${elInEl}`),\n        clickElement\n    );\n\n\n    // ex:  I type \"toli\" into the \"Username Input\"\n    //      I type \"toli\" into \"Username\"\n    //      I type \"toli\" into the \"Username Input\" on the \"SignIn form\"\n    When(\n        r(`I type ${string}${elInEl}`),\n        (text, input, parent) => {\n            const randomVariableRegex = /<rand:(\\w)+>/;\n            const randomVariable = text.match(randomVariableRegex);\n            \n            if (randomVariable) {\n                const randomNumber = Math.round(Math.random() * 10000);\n                text = text.replace(randomVariableRegex, randomNumber);\n                setState(randomVariable[1], randomNumber);\n            }\n\n            const stateVariableRegex = /<var:(\\w)+>/;\n            const stateVariable = text.match(stateVariableRegex);\n\n            if (stateVariable) {\n                text = text.replace(stateVariableRegex, STATE[stateVariable[1]]);\n            }\n\n            getNormalized([parent, input]).type(text);\n        }\n    );\n\n    // ex:  When I replace the contents of \"Username\" with \"toli\"\n    //      When I replace the contents of \"Username\" inside of the \"Login Modal\" with \"toli\"\n    When(\n        r(`I replace the contents${elInEl} with ${string}`),\n        (input, parent, contains, text) => {\n            getNormalized([parent, input], { text: contains })\n                .clear()  \n                .type(text);\n        }\n    );\n\n    // ex: I open the \"Login Screen\"\n    When(\n        r(`I open${elInEl}`),\n            screen => {\n            const url = SCREENS[screen];\n            \n            if(!url) throw Error(`Screen ${screen} has no specified URL`);\n            \n            cy.visit(url); \n        }\n    );\n\n    // ex: I scroll to the bottom the \"Modal\"\n    When(\n        r(`I scroll to the (top|bottom) of the page`),\n        (direction) => {\n            let windowObj;\n            cy.window()\n                .then(win => {\n                    windowObj = win;\n                    return cy.get('body');\n                })\n                .then(body => {\n                    const { scrollHeight } = body[0];\n                    const px = direction === 'top'\n                        ? 0\n                        : scrollHeight + 100;\n\n                    windowObj.scrollTo(0, px);\n                });\n        }\n    );\n\n    // @TODO: Figure out while default way isn't working\n    When('I wait for results to load', waitForResults);\n\n    When(\n        r(`I drag${elInEl} above${elInEl}`),\n        (el1, el1Parent, el1Contains, el2, el2Parent, el2Contains) => {\n            const $el1 =  getNormalized([el1Parent, el1], { text: el1Contains });\n            $el1.trigger('mousedown', { which: 1, force: true });\n\n            let el2X = 0;\n            let el2Y = 0;\n            \n            getNormalized([el2Parent, el2], { text: el2Contains }).then($el => {\n              const { x, y } = $el[0].getBoundingClientRect();\n              el2X = x;\n              el2Y = y;\n\n              return getNormalized('Ranking Form');\n            }).then($el => {\n                const { x: containerX, y: containerY } = $el[0].getBoundingClientRect();\n\n                const newPosOpts = {\n                    x: 400,\n                    y: 100,\n                    force: true\n                };\n\n                $el \n                    .trigger('mousemove', newPosOpts)\n                    .trigger('mouseup', newPosOpts);\n            });\n        }\n    );\n\n    When('I take a snapshot', () => {\n        cy.matchImageSnapshot({\n            threshold: .5,\n        });\n    });\n\n    // ex: I should be redirected to the \"Login Screen\"\n    Then(\n        r(`I should be redirected to (?:the )*${string}`),\n        screen => {\n        cy.url().should('contain', SCREENS[screen]);\n    });\n\n    // I should see 3 \"Buttons\" in \"Modal\"\n    Then(\n        r(`I should see ${int}${elInEl}(?: containing ${string})?`),\n        (number, el, parent, text) => {\n            getNormalized([parent, el], { singular: true, text })\n                .should('have.length', number);\n        }\n    );\n\n    // ex: I should see \"Press Me\" on the \"Button\" inside the \"Modal\"\n    Then(\n        r(`I should see ${string}${elInEl}`),\n        (text, el, parent) => shouldExist(el, { parent, text })\n    );\n \n    // putting after because the one before exclusively works \n    // for text and doesn't have a verb before it\n    // ex: I should see \"Press Me Button\" on the \"Button\" inside the \"Modal\"\n    Then(\n        r(`I should see${elInEl}`),\n        (el, parent) => shouldExist(el, { parent })\n    );\n\n    // ex:  I should not see the \"Buttons\" in the \"Modal\"\n    //      I should not see \"Buttons\" on the \"Page\"\n    //      I should not see the \"Button\"\n    Then(\n        r(`I should not see${elInEl}`),\n        (el, parent) => {\n            getNormalized([parent, el], { singular: true })\n                .should('have.length', 0);\n        }\n    );\n\n    // ex: \"Username\" should be \"toli\"\n    Then('{string} should be {string}', shouldExist);\n\n    // ex: \"Username's\" value should be \"toli\"\n    Then('{string} value should be {string}', shouldExist);\n\n    // ex: I should see a \"red\" background on the \"Button\"\n    Then(\n        r(`I should see a ${string} background${elInEl}`),\n        (background, el, parent) => {\n            getNormalized([parent, el]).should('have.css', 'background-color', hex2rgbCSS(background))\n        }\n    )\n\n     // ex: I should see a \"red\" border on the \"Button\"\n     Then(\n        r(`I should see a ${string} border${elInEl}`),\n        (background, el, parent) => {\n            getNormalized([parent, el]).should('have.css', 'border-color', hex2rgbCSS(background))\n        }\n    )\n}\n"]}