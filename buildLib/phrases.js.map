{"version":3,"sources":["../lib/phrases.js"],"names":["REGEX","SCROLL","CLICK","elInEl","TYPE","string","REPLACE","OPEN","page","WAIT_FOR_RESULTS","WAIT_SECONDS","int","DRAG_ABOVE","TAKE_SNAPSHOT","TAKE_EL_SNAPSHOT","ON_PAGE","REDIRECTED_TO","N_ELEMENTS","TEXT_ON_EL","EL_EXISTS","EL_DOES_NOT_EXIST","EL_CONTAINS_TEXT","EL_VALUE","EL_BACKBGROUND","EL_BORDER","When","scroll","click","type","replace","open","waitForResults","seconds","cy","wait","dragAbove","takeSnapshot","takeElSnapshot","Then","onPage","redirectedTo","nElements","textOnEl","elExists","elDoesNotExist","elBackground","elBorder"],"mappings":"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","file":"phrases.js","sourcesContent":["import {\n    scroll,\n    click,\n    type,\n    replace,\n    open,\n    wait,\n    waitForResults,\n    dragAbove,\n    takeSnapshot,\n    takeElSnapshot,\n    onPage,\n    redirectedTo,\n    nElements,\n    textOnEl,\n    elExists,\n    elDoesNotExist,\n    elBackground,\n    elBorder,\n} from './functions';\n\nimport {\n    r,\n    string,\n    int,\n    elInEl,\n    page,\n} from './regexBuilder';\n\nexport const REGEX = {\n    SCROLL: r(`I scroll to the (top|bottom) of the page`),\n    CLICK: r(`I click${elInEl}`),\n    TYPE: r(`I type ${string}${elInEl}`),\n    REPLACE: r(`I replace the contents${elInEl} with ${string}`),\n    OPEN: r(`I open${page}`),\n    WAIT_FOR_RESULTS: r(`I wait for results to load`),\n    WAIT_SECONDS: r(`I wait ${int} seconds`),\n    DRAG_ABOVE: r(`I drag${elInEl} above${elInEl}`),\n    TAKE_SNAPSHOT:  r(`I take a snapshot`),\n    TAKE_EL_SNAPSHOT: r(`I take a snapshot of${elInEl}`),\n    ON_PAGE: r(`I should be on${page}`),\n    REDIRECTED_TO: r(`I should be redirected to${page}`),\n    N_ELEMENTS: r(`I should see ${int}${elInEl}`),\n    TEXT_ON_EL: r(`I should see ${string}${elInEl}`),\n    EL_EXISTS: r(`I should see${elInEl}`),\n    EL_DOES_NOT_EXIST: r(`I should not see${elInEl}`),\n    EL_CONTAINS_TEXT: r(`${elInEl} should (?:be|contain) ${string}`),\n    EL_VALUE: r(`${elInEl} value should be ${string}`),\n    EL_BACKBGROUND: r(`I should see a ${string} background${elInEl}`),\n    EL_BORDER: r(`I should see a ${string} border${elInEl}`),\n};\n\nexport default () => {\n    // ex: I scroll to the bottom the \"Modal\"\n    When(REGEX.SCROLL, scroll);\n\n    // ex:  I click on the \"Button\"\n    //      I click \"Save\"\n    //      I click on \"Save\" inside the \"Modal\"\n    //      I click on \"Button\" inside the \"Modal\" containing \"Save\"\n    When(REGEX.CLICK, click);\n\n\n    // ex:  I type \"toli\" into the \"Username Input\"\n    //      I type \"toli\" into \"Username\"\n    //      I type \"toli\" into the \"Username Input\" on the \"SignIn form\"\n    When(REGEX.TYPE, type);\n\n    // ex:  When I replace the contents of \"Username\" with \"toli\"\n    //      When I replace the contents of \"Username\" inside of the \"Login Modal\" with \"toli\"\n    When(REGEX.REPLACE, replace);\n\n    // ex: I open the \"Login Screen\"\n    When(REGEX.OPEN, open);\n\n    // @TODO: Figure out while default way isn't working\n    When(REGEX.WAIT_FOR_RESULTS, waitForResults);\n\n    // use only in cases where Cypress functions can't be used\n    When(REGEX.WAIT_SECONDS, (seconds) => {\n        cy.wait(seconds * 1000);\n    });\n\n    // This is experimental and not part of the official API\n    When(REGEX.DRAG_ABOVE, dragAbove);\n\n    When(REGEX.TAKE_SNAPSHOT, takeSnapshot);\n\n    When(REGEX.TAKE_EL_SNAPSHOT, takeElSnapshot);\n\n    // ex: I should be on the \"Login Screen\"\n    Then(REGEX.ON_PAGE, onPage);\n\n    // ex: I should be redirected to the \"Login Screen\"\n    Then(REGEX.REDIRECTED_TO, redirectedTo);\n\n    // I should see 3 \"Buttons\" in \"Modal\"\n    Then(REGEX.N_ELEMENTS, nElements);\n\n    // ex: I should see \"Press Me\" on the \"Button\" inside the \"Modal\"\n    Then(REGEX.TEXT_ON_EL, textOnEl);\n \n    // putting after because the one before exclusively works \n    // for text and doesn't have a verb before it\n    // ex: I should see \"Press Me Button\" on the \"Button\" inside the \"Modal\"\n    Then(REGEX.EL_EXISTS, elExists);\n\n    // ex:  I should not see the \"Buttons\" in the \"Modal\"\n    //      I should not see \"Buttons\" on the \"Page\"\n    //      I should not see the \"Button\"\n    Then(REGEX.EL_DOES_NOT_EXIST, elDoesNotExist);\n\n    // ex: \"Username\" should be \"toli\"\n    Then(REGEX.EL_CONTAINS_TEXT, elExists);\n\n    // ex: \"Username's\" value should be \"toli\"\n    Then(REGEX.EL_VALUE, elExists);\n\n    // ex: I should see a \"red\" background on the \"Button\"\n    Then(REGEX.EL_BACKBGROUND, elBackground)\n\n    // ex: I should see a \"red\" border on the \"Button\"\n    Then(REGEX.EL_BORDER, elBorder)\n}\n"]}