{"version":3,"sources":["../../lib/__tests__/regexBuilder.spec.js"],"names":["describe","it","hello","expect","match","toBe","toBeFalsy","list","required","toBeNull","capture","string","int","elInEl","m","page"],"mappings":"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","file":"regexBuilder.spec.js","sourcesContent":["import {\n    r,\n    or,\n    string,\n    int,\n    elInEl,\n    page,\n} from '../regexBuilder';\n\ndescribe('RegexBuilder', () => {\n    describe('r', () => {\n        it('creates a regex that matches from start to finish', () => {\n            const hello = r('hello');\n\n            expect('hello'.match(hello)[0]).toBe('hello');\n        })\n\n        it('won\\'t match if there is extra characters at the start or end', () => {\n            const hello = r('hello');\n\n            expect('1hello1'.match(hello)).toBeFalsy();\n        })\n    });\n\n    describe('or', () => {\n        it('matches against a required list', () => {\n            const list = or(['toli', 'randy', 'axel'], { required: true });\n\n            expect('I am toli'.match(list)[0]).toBe('toli')\n        });\n\n        it('doesn\\'t match against a required list if the subject is not present', () => {\n            const list = or(['toli', 'randy', 'axel'], { required: true });\n        \n            expect('I am Groot'.match(list)).toBeNull()\n        });\n\n        it('matches if the list is not required', () => {\n            const list = or(['toli', 'randy', 'axel']);\n        \n            expect('I am Groot'.match(list)[0]).toBe('')\n        });\n\n        it('captures the item if capturing is enabled', () => {\n            const list = or(['toli', 'randy', 'axel'], { capture: true, required: true });\n        \n            expect('I am toli'.match(list)[1]).toBe('toli')\n        });\n    });\n\n    describe('string', () => {\n        it('matches a string in quotes', () => {\n            expect('I am \"Groot\"'.match(string)[1]).toBe('Groot');\n        });\n\n        it('does not match a string without quotes', () => {\n            expect('I am Groot'.match(string)).toBeNull();\n        });\n    });\n\n    describe('int', () => {\n        it('matches an int', () => {\n            expect('I am #1'.match(int)[1]).toBe('1');\n        });\n\n        it('does not match a string without quotes', () => {\n            expect('I am # one'.match(int)).toBeNull();\n        });\n    });\n\n    describe('elInEl', () => {\n        it('matches basic element', () => {\n            expect('I should see an \"Element\"'.match(elInEl)[1]).toBe('Element');\n        });\n\n        it('matches element with no space in the front', () => {\n            expect('\"Username\" should be red'.match(elInEl)[1]).toBe('Username');\n        });\n\n        it('matches an element with a parent', () => {\n            const m = 'I should see a \"Button\" in the \"Modal\"'.match(elInEl);\n            expect(m[1]).toBe('Button');\n            expect(m[2]).toBe('Modal');\n        });\n\n        it('matches an element with text', () => {\n            const m = 'I should see a \"Button\" in the \"Modal\" containing \"Submit\"'.match(elInEl);\n            expect(m[1]).toBe('Button');\n            expect(m[2]).toBe('Modal');\n            expect(m[3]).toBe('Submit');\n        });\n\n\n        it('works with other verbs', () => {\n            const m = 'I should see a \"Button\" on the \"Modal\" containing \"Submit\"'.match(elInEl);\n            expect(m[1]).toBe('Button');\n            expect(m[2]).toBe('Modal');\n            expect(m[3]).toBe('Submit');\n        });\n    });\n\n    describe('page', () => {\n        it('should match a page', () => {\n            const m = 'I should be on \"Home\"'.match(page);\n            expect(m[1]).toBe('Home');\n        })\n\n        it('should match a page with a suffix', () => {\n            const m = 'I should be on \"Home\" Page'.match(page);\n            expect(m[1]).toBe('Home');\n        })\n\n        it('should match a page with the in front', () => {\n            const m = 'I should be on the \"Home\" Page'.match(page);\n            expect(m[1]).toBe('Home');\n        })\n    });\n})"]}