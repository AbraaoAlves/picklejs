{"version":3,"sources":["../../lib/__tests__/functions.spec.js"],"names":["functions","hex2rgbCSS","buildClassSelector","parseNumberEls","getNormalized","getSelector","scroll","click","type","replace","open","waitForResults","dragAbove","takeSnapshot","takeElSnapshot","onPage","redirectedTo","nElements","textOnEl","elExists","elDoesNotExist","elBackground","elBorder","jest","mock","describe","get","last","eq","first","should","window","then","scrollTo","clickFn","typeFn","clearFn","visitFn","wait","matchImageSnapshot","url","beforeEach","ELEMENT_SELECTORS","default","Button","fn","mockReturnValue","mockImplementation","func","scrollHeight","clear","global","cy","visit","it","expect","toEqual","ordinal","el","toBeCalledWith","singular","toBeCalled","text","toThrow","toBe","test","toHaveBeenCalled","toHaveBeenCalledWith","stringMatching","STATE","userId","threshold","thresholdType","toHaveBeenLastCalledWith"],"mappings":"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","file":"functions.spec.js","sourcesContent":["import * as functions from '../functions';\nimport { ELEMENT_SELECTORS, STATE, SCREENS, setScreens } from '../variables';\n\nlet {\n    hex2rgbCSS,\n    buildClassSelector,\n    parseNumberEls,\n    getNormalized,\n    getSelector,\n\n    scroll,\n    click,\n    type,\n    replace,\n    open,\n    waitForResults,\n    dragAbove,\n    takeSnapshot,\n    takeElSnapshot,\n    onPage,\n    redirectedTo,\n    nElements,\n    textOnEl,\n    elExists,\n    elDoesNotExist,\n    elBackground,\n    elBorder,\n} = functions;\n\njest.mock('../variables');\n\ndescribe('functions', () => {\n    let get;\n    let last;\n    let eq;\n    let first;\n    let should;\n    let window;\n    let then;\n    let scrollTo;\n    let clickFn;\n    let typeFn;\n    let clearFn;\n    let visitFn;\n    let wait;\n    let matchImageSnapshot;\n    let url;\n\n    beforeEach(() => {\n        ELEMENT_SELECTORS['Button'] = '.button';\n        ELEMENT_SELECTORS['Input'] = '.input';\n        ELEMENT_SELECTORS['Modal'] = {\n            default: '.modal',\n            Button: '.modal-button',\n        };\n\n        setScreens({\n            'Home': '/home'\n        });\n\n        last = jest.fn();\n        eq = jest.fn();\n        should = jest.fn();\n        clickFn = jest.fn();\n        first = jest.fn().mockReturnValue({\n            should,\n            click: clickFn\n        });\n\n\n        then = jest.fn();\n        scrollTo = jest.fn();\n\n        typeFn = jest.fn();\n\n        clearFn = jest.fn().mockReturnValue({\n            type: typeFn\n        });\n\n        visitFn = jest.fn();\n\n        wait = jest.fn();\n\n        matchImageSnapshot = jest.fn();\n\n        url = jest.fn().mockReturnValue({\n            should\n        })\n\n        window = jest.fn().mockReturnValue({\n            then: then\n                .mockImplementation((func) => {\n                    func({ scrollTo });\n\n                    return {\n                        then: (func) => {\n                            func([{ scrollHeight: 1000 }] )\n                        }\n                    }\n                })\n        })\n\n        get = jest.fn().mockReturnValue({\n            last,\n            eq,\n            first,\n            type: typeFn,\n            click: clickFn,\n            clear: clearFn,\n            matchImageSnapshot,\n            should,\n        })\n\n        global.cy = {\n            get,\n            window,\n            click: clickFn,\n\n            visit: visitFn,\n            wait,\n            matchImageSnapshot,\n            url: url,\n        };\n    });\n\n    describe('hex2rbgCSS', () => {\n        it('converts a color with no alpha', () => {\n            expect(hex2rgbCSS('F2F2F2')).toEqual('rgb(242, 242, 242)');\n        });\n\n        it('converts a color with an alpha', () => {\n            expect(hex2rgbCSS('F2F2F280')).toEqual('rgb(242, 242, 242, 0.5)');\n        })\n\t});\n\n    describe('buildClassSelector', () => {\n        it('Converts a class to an attribute', () => {\n            expect(buildClassSelector('.test-class')).toEqual('[class*=\"test-class\"]')\n        });\n        \n        it('Attaches :modifiers to the end', () => {\n            expect(buildClassSelector('.test-class:hover')).toEqual('[class*=\"test-class\"]:hover')\n        });\n\n        it('Handles Child Classes', () => {\n            expect(buildClassSelector('.test-class .class-2')).toEqual('[class*=\"test-class\"] [class*=\"class-2\"]')\n        });\n\n        it('Handles Multiple Classes', () => {\n            expect(buildClassSelector('.test-class.class-2')).toEqual('[class*=\"test-class\"][class*=\"class-2\"]')\n        });\n\n        it('Handles :contains()', () => {\n            expect(buildClassSelector('.test-class:contains(\"Good Stuff\")')).toEqual('[class*=\"test-class\"]:contains(\"Good Stuff\")')\n        });\n\n        it('Handles Wierd Combos of Classes', () => {\n            expect(buildClassSelector('.test-class.class-2:active .class3:hover > .class4'))\n                .toEqual('[class*=\"test-class\"][class*=\"class-2\"]:active [class*=\"class3\"]:hover > [class*=\"class4\"]')\n        });\n\t});\n\n    describe('parseNumberEls', () => {\n        it('handles numbered elements', () => {\n            expect(parseNumberEls('third Button')).toEqual({\n                ordinal: 3,\n                el: 'Button'\n            });\n\n            expect(parseNumberEls('fifty-sixth Button')).toEqual({\n                ordinal: 56,\n                el: 'Button'\n            });\n        });\n\n        it('handles last element', () => {\n            expect(parseNumberEls('last Button')).toEqual({\n                ordinal: 'last',\n                el: 'Button'\n            });\n        });\n\n        it('handles elements without a number', () => {\n            expect(parseNumberEls('Button')).toEqual({\n                el: 'Button'\n            });\n        });\n\t});\n\n    describe('getNormalized', () => {\n        it('accepts just the element', () => {\n            getNormalized('Button');\n\n            expect(get).toBeCalledWith('[class*=\"button\"]')\n        });\n\n        it('accepts an element and its parent', () => {\n            getNormalized(['Modal', 'Button']);\n\n            expect(get).toBeCalledWith('[class*=\"modal\"] [class*=\"modal-button\"]')\n        });\n\n        it('filters out undefined elements', () => {\n            getNormalized([null,'Button']);\n\n            expect(get).toBeCalledWith('[class*=\"button\"]')\n        });\n\n        it('Gets rid of \\'s', () => {\n            getNormalized(['Button\\'s']);\n\n            expect(get).toBeCalledWith('[class*=\"button\"]');\n        })\n\n        it('Makes an element sigular if the singular option is passed in' , () => {\n            getNormalized(['Buttons'], { singular: true });\n\n            expect(get).toBeCalledWith('[class*=\"button\"]')\n        });\n\n        it('parses out ordinals', () => {\n            getNormalized(['third Button']);\n            getNormalized(['last Button']);\n\n            expect(get).toBeCalledWith('[class*=\"button\"]')\n            expect(eq).toBeCalledWith(2)\n            expect(last).toBeCalled()\n        });\n\n        it('selects the correct element if text is passed', () => {\n            getNormalized('Button', { text: 'Hi There' });\n\n            expect(get).toBeCalledWith('[class*=\"button\"]:contains(\"Hi There\")')\n        });\n\n        it('throws an error if the selector is not defined', () => {\n            expect(() =>{\n                getNormalized(['Link']);\n            }).toThrow('The className was not defined for Link')\n\n            expect(() =>{\n                getNormalized(['Modal', 'Link']);\n            }).toThrow('The className was not defined for Modal>Link')\n\n\n            expect(() =>{\n                getNormalized(['Header', 'Link']);\n            }).toThrow('The className was not defined for Header')\n        });\n\t});\n\n    describe('getSelector', () => {\n        it('accepts just the element', () => {\n            expect(getSelector('Button')).toBe('[class*=\"button\"]');\n        });\n\n        it('an element and its parent', () => {\n            expect(\n                getSelector(['Modal', 'Button'])\n            ).toBe('[class*=\"modal\"] [class*=\"modal-button\"]');\n        });\n\n        it('filters out undefined elements', () => {\n            expect(getSelector([null,'Button'])).toBe('[class*=\"button\"]');\n        });\n\n        it('Gets rid of \\'s', () => {\n            expect(getSelector(['Button\\'s']))\n                .toBe('[class*=\"button\"]');\n        })\n\n        it('Makes an element singular if the singular option is passed in' , () => {\n            expect(getSelector(['Buttons'], { singular: true }))\n                .toBe('[class*=\"button\"]')\n        });\n\n        it('parses out ordinals', () => {\n            expect(getSelector(['third Button'])).toBe('[class*=\"button\"]');\n            expect(getSelector(['last Button'])).toBe('[class*=\"button\"]');\n        });\n\n        it('throws an error if the selector is not defined', () => {\n            expect(() =>{\n                getSelector(['Link']);\n            }).toThrow('The className was not defined for Link')\n\n            expect(() =>{\n                getSelector(['Modal', 'Link']);\n            }).toThrow('The className was not defined for Modal>Link')\n\n\n            expect(() =>{\n                getSelector(['Header', 'Link']);\n            }).toThrow('The className was not defined for Header')\n        });\n\n        it('selects the correct element if text is passed', () => {\n            expect(getSelector('Button', { text: 'Hi There' }))\n                .toBe('[class*=\"button\"]:contains(\"Hi There\")')\n        });\n\t});\n\n    test('elExists', () => {\n        elExists('Button');\n        \n        expect(get).toBeCalledWith('[class*=\"button\"]')\n        expect(first).toBeCalled();\n        expect(should).toBeCalledWith('exist');\n\t});\n\n    // gotta figure out how to test this...\n    describe('scroll', () => {\n        it('scrolls to the top', () => {\n            scroll('top');\n            \n            expect(window).toHaveBeenCalled();\n            expect(get).toHaveBeenCalledWith('body');\n            expect(scrollTo).toHaveBeenCalledWith(0, 0);\n        });\n\n        it('scrolls to the bottom', () => {\n            scroll('bottom');\n            \n            expect(window).toHaveBeenCalled();\n            expect(get).toHaveBeenCalledWith('body');\n            expect(scrollTo).toHaveBeenCalledWith(0, 1100);\n        });\n    });\n\n    test('click', () => {\n        click('Button', 'Modal', { text: 'Hello' });\n\n        expect(clickFn).toBeCalled();\n\t});\n\n    describe('type', () => {\n        it('works with text', () => {\n            type('hello', 'Input');\n            expect(typeFn).toBeCalledWith('hello');\n        })\n        it('works with a random variable', () => {\n            type('user<rand:userId>', 'Input');\n\n            // not sure how to match random\n            expect(typeFn).toBeCalledWith(\n                expect.stringMatching(/user\\d+/)\n            );\n        })\n\n        it('generates a random variable, saves it and then allows it to be used`', () => {\n            type('user<rand:userId>', 'Input');\n\n            expect(STATE.userId).toEqual(\n                expect.stringMatching(/\\d+/)\n            );\n\n            type('user<var:userId>', 'Input');\n\n            expect(typeFn).toHaveBeenCalledWith(\n                'user' + STATE.userId\n            );\n        })\n\t});\n\n    test('replace', () => {\n        replace('Input', '', '', 'hello');\n\n        expect(clearFn).toHaveBeenCalled();\n        expect(typeFn).toBeCalledWith('hello')\n\t});\n\n    test('open', () => {\n        open('Home');\n\n        expect(visitFn).toBeCalledWith('/home');\n\n\t});\n\n    test('waitForResults', () => {\n        waitForResults();\n\n        expect(wait).toBeCalledWith(1000)\n\t});\n\n    // Experimental, not nailed down yet\n    describe('dragAbove', () => {\n\n\t});\n\n    test('takeSnapshot', () => {\n        takeSnapshot('Test');\n\n        expect(matchImageSnapshot).toBeCalledWith(\n            'Test', {\n                threshold: 1000,\n                thresholdType: 'pixel'\n            }\n        );\n\t});\n\n    test('takeElSnapshot', () => {\n        takeElSnapshot('Input');\n\n        expect(matchImageSnapshot).toBeCalledWith(\n            'Input', {\n                threshold: 1000,\n                thresholdType: 'pixel'\n            }\n        );\n\t});\n\n    test('onPage', () => {\n        onPage('Home');\n\n        expect(should).toBeCalledWith(\n            'contain',\n            '/home'\n        );\n\t});\n\n    test('redirectedTo', () => {\n        redirectedTo('Home');\n\n        expect(should).toBeCalledWith(\n            'contain',\n            '/home'\n        );\n\t});\n\n    test('nElements', () => {\n        nElements(3, 'Input')\n        expect(should).toHaveBeenCalledWith(\n            'have.length',\n            3\n        );\n    });\n    \n    test('elExists', () => {\n        elExists('Input');\n\n        expect(should).toHaveBeenCalledWith('exist')\n\t});\n\n    test('textOnEl', () => {\n        textOnEl('Text', 'Button', 'Modal');\n\n        expect(should).toHaveBeenCalledWith('exist')\n\n\t});\n\n    test('elDoesNotExist', () => {\n        elDoesNotExist('Input');\n\n        expect(should).toHaveBeenCalledWith(\n            'have.length',\n            0\n        )\n\t});\n\n    test('elBackground', () => {\n        elBackground('#ffffff', 'Input');\n\n        expect(should).toHaveBeenLastCalledWith(\n            'have.css',\n            'background-color',\n            'rgb(255, 255, 255)'\n        );\n\t});\n\n    test('elBorder', () => {\n        elBorder('#ffffff', 'Input');\n\n        expect(should).toHaveBeenLastCalledWith(\n            'have.css',\n            'border-color',\n            'rgb(255, 255, 255)'\n        );\n\t});\n})"]}